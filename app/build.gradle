plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    // By defining it, R and BuildConfig classes are generated in this package
    // Should always keep the some as applicationId
    // Do not set testNamespace and namespace to the same value, otherwise there will be namespace collisions.
    namespace "com.github.erfansn.gradlepractice"
    testNamespace "com.github.erfansn.gradlepractice.testing"

    compileSdk rootProject.ext.compileSdkVersion

    defaultConfig {
        applicationId "ir.erfansn.gradlepractice"
        minSdk 21
        targetSdk rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // Specifies a sorted list of flavors that the plugin should try to use from
        // a given dimension. The following tells the plugin that, when encountering
        // a dependency that includes a "minApi" dimension, it should select the
        // "minApi18" flavor. You can include additional flavor names to provide a
        // sorted list of fallbacks for the dimension.
        missingDimensionStrategy 'tier', 'full', 'free'
    }
    // Including the passwords for your release key and keystore inside the build file is not a good
    // security practice alternatively we can configure the build file to obtain these passwords from
    // environment variables `System.getenv("ENVIRONMENT_KEY")`
    signingConfigs {
        release {
            storeFile file("..\\gradlepractice.jks")
            storePassword "password"
            keyAlias "GradlePractice"
            keyPassword "password"
        }
    }

    // Each build variant represents a different version of your app that you can build.
    // For example, you might want to build one version of your app that's free, with a limited set of content,
    // and another paid version that includes more.
    // We cannot configure build variants directly instead, you do configure the build types and product flavors that form them.
    buildTypes {
        release {
            signingConfig signingConfigs.release

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            applicationIdSuffix ".debug"
            debuggable true
        }
        staging {
            initWith debug
            applicationIdSuffix ".debugStaging"
            // Specifies a sorted list of fallback build types that the
            // plugin should try to use when a dependency does not include a
            // "staging" build type. You may specify as many fallbacks as you
            // like, and the plugin selects the first build type that's
            // available in the dependency.
            matchingFallbacks = ['debug', 'release']
        }
    }
    // To change build type for testing
    testBuildType 'staging'
    // Specifies the flavor dimensions you want to use. The order in which you
    // list each dimension determines its priority, from highest to lowest,
    // when Gradle merges variant sources and configurations. You must assign
    // each product flavor you configure to one of the flavor dimensions.
    flavorDimensions "api", "mode"
    productFlavors {
        full {
            // AGP automatically add module's flavor to that dimension if only one dimension defined
            dimension "mode"
            applicationIdSuffix ".full"
            versionNameSuffix "-full"
            // You can override the default selection at the product flavor
            // level by configuring another missingDimensionStrategy property
            // for the 'minApi' dimension.
            missingDimensionStrategy 'tier', 'full', 'free'
        }
        demo {
            dimension "mode"
            applicationIdSuffix ".demo"
            versionNameSuffix "-demo"
            // Specifies a sorted list of fallback flavors that the plugin
            // should try to use when a dependency's matching dimension does
            // not include a "free" flavor. You may specify as many
            // fallbacks as you like, and the plugin selects the first flavor
            // that's available in the dependency's "tier" dimension.
            matchingFallbacks = ['full']
        }

        minApi24 {
            dimension "api"
            minSdkVersion 24
            // To ensure the target device receives the version of the app with
            // the highest compatible API level, assign version codes in increasing
            // value with API level
            versionCode 30000 + android.defaultConfig.versionCode
            versionNameSuffix "-minApi24"
        }
        minApi23 {
            dimension "api"
            minSdkVersion 23
            versionCode 20000  + android.defaultConfig.versionCode
            versionNameSuffix "-minApi23"
        }
        minApi21 {
            dimension "api"
            minSdkVersion 21
            versionCode 10000  + android.defaultConfig.versionCode
            versionNameSuffix "-minApi21"
        }
    }
    // We can remove certain build variant configurations by creating a variant filter in
    // your module-level gradle file
    variantFilter { variant ->
        def names = variant.flavors*.name
        if (names.contains("minApi21") && names.contains("demo")) {
            setIgnore(true)
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }

    dependenciesInfo {
        // Disables dependency metadata when building APKs.
        includeInApk false
        // Disables dependency metadata when building Android App Bundles.
        includeInBundle false
    }
}

dependencies {
    // When conflict occur gradle automatically resolve it with update dependency libs version on compile classpath
    // But when dependency on runtime classpath version below than compile classpath this mechanism doesn't work

    // Dependency on a local library module
    implementation project(':mylibrary')

    // Into two way we can add remote binary to dependencies
    implementation "androidx.core:core-ktx:${androidx.coreKtx}"
    implementation group: 'androidx.core', name: 'core-ktx', version: androidx.coreKtx

    // To exclude transitive dependency we can use `exclude` key
    implementation 'androidx.appcompat:appcompat:1.4.2' /*{
        exclude group: 'com.example.imgtools', module: 'native'
    }*/

    // For add a dependency to a specific build variant or test source set
    // we can prefix dependency configuration with build variants or test source set.
    demoImplementation project(":mylibrary")
    testDemoImplementation project(":lib")

    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.5.0'
    implementation 'androidx.navigation:navigation-ui-ktx:2.5.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}